{"version":3,"sources":["comment/index.js","App.js","serviceWorker.js","index.js"],"names":["Comment","comment","className","email","size","rating","default","_id","author","body","moment","createdAt","locale","format","href","data-toggle","data-placement","title","onclick","class","App","state","comments","parts","window","location","split","axios","get","then","res","data","setState","this","length","map","index","key","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RA8CeA,G,MAzCC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,4BACE,6BACE,yBAAKC,UAAU,mBACb,kBAAC,IAAD,CAAUC,MAAM,kBAAkBC,KAAM,GAAIC,OAAO,KAAKC,QAAQ,YAAYJ,UAAU,uBAEpFD,EAAQM,KAAON,EAAQO,OACnB,uBAAGN,UAAU,gBAAgBD,EAAQO,QACrC,MAGR,yBAAKN,UAAU,eACb,2BAAID,EAAQQ,MACZ,0BAAMP,UAAU,iBAAiBQ,IAAOT,EAAQU,WAAWC,OAAO,MAAMC,OAAO,UAIjFZ,EAAQM,IAEJ,yBAAKL,UAAU,sBACb,uBAAGY,KAAI,0BAAqBb,EAAQM,IAA7B,QAAwCQ,cAAY,UAAUC,iBAAe,MAAMC,MAAM,gEAAeC,QAAQ,6QACrH,0BAAMC,MAAM,oCAEd,yBAAKjB,UAAU,cACb,uBAAGY,KAAI,0BAAqBb,EAAQM,IAA7B,SAAyCQ,cAAY,UAAUC,iBAAe,MAAMC,MAAM,8CAC/F,0BAAME,MAAM,gCAEd,uBAAGL,KAAI,0BAAqBb,EAAQM,IAA7B,WAA2CQ,cAAY,UAAUC,iBAAe,MAAMC,MAAM,8CACjG,0BAAME,MAAM,iCAKlB,KAEN,gCCTSC,E,2MAzBbC,MAAQ,CACNC,SAAU,I,mFAGS,IAAD,OAEZC,EADWC,OAAOC,SAASX,KACVY,MAAM,KAC7BC,IAAMC,IAAN,oBAAuBL,EAAM,KAC1BM,KAAK,SAAAC,GAAQ,IACJR,EAAaQ,EAAIC,KAAjBT,SACR,EAAKU,SAAS,CAAEV,iB,+BAIZ,IACAA,EAAaW,KAAKZ,MAAlBC,SAER,OAAOA,EAASY,OACZ,wBAAIhC,UAAU,gBACdiC,cAAIb,EAAU,SAACrB,EAASmC,GAAV,OAAoB,kBAAC,EAAD,CAASnC,QAASA,EAASoC,IAAKD,OAElE,2Y,GAtBUE,aCMEC,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,aD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.64809c63.chunk.js","sourcesContent":["import React from 'react';\nimport Gravatar from 'react-gravatar';\nimport moment from 'moment';\nimport 'moment/locale/ru';\n\nconst Comment = ({ comment }) => {\n  return (\n    <li>\n      <div>\n        <div className=\"commenter-image\">\n          <Gravatar email=\"{comment.email}\" size={50} rating=\"pg\" default=\"monsterid\" className=\"CustomAvatar-image\" />\n          {\n            comment._id && comment.author\n              ? <p className=\"comment-meta\">{comment.author}</p>\n              : null\n          }\n        </div>\n        <div className=\"commentText\">\n          <p>{comment.body}</p>\n          <span className=\"date sub-text\">{moment(comment.createdAt).locale('ru').format('LLL')}</span>\n        </div>\n      </div>\n      {\n        comment._id\n          ? (\n            <div className=\"comment-moderation\">\n              <a href={`/admin/comments/${comment._id}/all`} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Удалить все\"  onclick=\"return confirm('Вы точно хотите удалить все комментарии автора?')\">\n                <span class=\"glyphicon glyphicon-volume-off\"></span>\n              </a>\n              <div className=\"pull-right\">\n                <a href={`/admin/comments/${comment._id}/edit`} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Править\">\n                  <span class=\"glyphicon glyphicon-pencil\"></span>\n                </a>\n                <a href={`/admin/comments/${comment._id}/delete`} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Удалить\">\n                  <span class=\"glyphicon glyphicon-trash\"></span>\n                </a>\n              </div>\n            </div>\n          )\n          : null\n      }\n      <hr />\n    </li>\n  );\n}\n\nexport default Comment;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { map } from 'lodash';\n\nimport Comment from './comment';\n\nclass App extends Component {\n  state = {\n    comments: [],\n  };\n\n  componentDidMount() {\n    const location = window.location.href;\n    const parts = location.split('/');\n    axios.get(`/comments/${parts[4]}`)\n      .then(res => {\n        const { comments } = res.data;\n        this.setState({ comments });\n      })\n  }\n\n  render() {\n    const { comments } = this.state;\n\n    return comments.length\n      ? <ul className=\"comment-list\">{\n        map(comments, (comment, index) => <Comment comment={comment} key={index} />)\n      }</ul>\n      : <h3>Комментариев пока что нет. Будьте первым, кто прокомментирует статью!</h3>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('comments'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}